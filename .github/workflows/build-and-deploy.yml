name: Build, Scan, and Deploy React App to AKS

on:
  push:
    branches: [main] 
  pull_request: 
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  IMAGE_NAME: javascript-app
  NAMESPACE: javascript-namespace
  DEPLOYMENT_NAME: javascript-app-deployment

jobs:
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-outputs.outputs.image-tag }}
      image-full: ${{ steps.set-outputs.outputs.image-full }}
      build-id: ${{ steps.set-outputs.outputs.build-id }}
    permissions:
      contents: read
      security-events: write
      packages: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Build Information
        id: set-outputs
        run: |
          BUILD_ID="${GITHUB_RUN_NUMBER}-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}"
          IMAGE_TAG="$BUILD_ID"
          IMAGE_FULL="${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-full=$IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "$IMAGE_FULL" > image_full.txt
          echo "DEBUG: IMAGE_TAG is $IMAGE_TAG"
          echo "DEBUG: IMAGE_FULL is $IMAGE_FULL"
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install dependencies
        run: npm ci --no-audit --no-fund
      - name: Build React app
        run: npm run build
      - name: Login to Azure
        run: |
          az login --service-principal \
            --username "${{ secrets.AZURE_CLIENT_ID }}" \
            --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      - name: Login to Azure Container Registry
        run: az acr login --name "${{ secrets.REGISTRY_LOGIN_SERVER }}"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: network=host
      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag "${{ steps.set-outputs.outputs.image-full }}" \
            --tag "${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest" \
            --push \
            --file Dockerfile \
            .
      - name: Run Trivy Security Scan (Table Format)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: ${{ steps.set-outputs.outputs.image-full }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
      - name: Run Trivy Security Scan (SARIF for GitHub Security)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: ${{ steps.set-outputs.outputs.image-full }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
      - name: Upload Trivy Scan Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.set-outputs.outputs.build-id }}
          path: |
            build/
            image_full.txt
          retention-days: 7

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' && github.ref == 'refs/heads/main' }}
    environment:
      name: production
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Azure CLI and Kubernetes tools
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - name: Login to Azure
        run: |
          az login --service-principal \
            --username "${{ secrets.AZURE_CLIENT_ID }}" \
            --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ secrets.AKS_RESOURCE_GROUP }}" \
            --name "${{ secrets.AKS_CLUSTER_NAME }}" \
            --overwrite-existing
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build.outputs.build-id }}
      - name: Update image in Kubernetes manifests
        run: |
          IMAGE_TO_USE="$(cat image_full.txt)"
          echo "IMAGE_TO_USE is: $IMAGE_TO_USE"
          if [ -z "$IMAGE_TO_USE" ]; then
            echo "ERROR: IMAGE_TO_USE is empty. Failing early."
            exit 1
          fi
          find k8s/ -name "*.yaml" -type f -exec sed -i "s|javascript-app:latest|$IMAGE_TO_USE|g" {} \;
      - name: Cleanup deleted k8s manifests (if present)
        run: |
          rm -f k8s/kustomization.yaml k8s/monitoring.yaml k8s/policies.yaml
      - name: List k8s directory contents
        run: ls -l k8s/
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${NAMESPACE} --timeout=120s
      - name: Post-deployment checks
        run: |
          kubectl get pods -n ${NAMESPACE}
          kubectl get services -n ${NAMESPACE}
      - name: Print pod status and logs if rollout fails
        if: failure()
        run: |
          echo "\n==== POD STATUS ===="
          kubectl get pods -n ${NAMESPACE}
          echo "\n==== POD DESCRIBE (first 3 pods) ===="
          for pod in $(kubectl get pods -n ${NAMESPACE} -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | head -n 3); do
            echo "\n--- Describe for $pod ---"
            kubectl describe pod $pod -n ${NAMESPACE}
            echo "\n--- Logs for $pod ---"
            kubectl logs $pod -n ${NAMESPACE} --tail=50 || true
          done
